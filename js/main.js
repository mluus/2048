// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var MoveIsValid, WinningTileValue, arrayEqual, boardEqual, boardIsFull, buildBoard, collapseCells, colorChange, gameLost, gameWon, generateTile, getColumn, getColumnV3, getColumnv2, getRandomCellIndecies, getRow, mergeCells, move, noValidMoves, ppArray, randomIndex, randomValue, setColumn, setRow, showBoard;
    WinningTileValue = 2048;
    ppArray = function(array) {
      var row, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        row = array[_i];
        _results.push(console.log(row));
      }
      return _results;
    };
    buildBoard = function() {
      return [0, 1, 2, 3].map(function(x) {
        return [0, 1, 2, 3].map(function(y) {
          return 0;
        });
      });
    };
    getRow = function(rowNumber, board) {
      var b, r, _ref;
      _ref = [rowNumber, board], r = _ref[0], b = _ref[1];
      return [b[r][0], b[r][1], b[r][2], b[r][3]];
    };
    arrayEqual = function(a, b) {
      var i, val, _i, _len;
      for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
        val = a[i];
        if (val !== b[i]) {
          return false;
        }
      }
      return true;
    };
    boardEqual = function(a, b) {
      var i, row, _i, _len;
      for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
        row = a[i];
        if (!arrayEqual(row, b[i])) {
          return false;
        }
      }
      return true;
    };
    MoveIsValid = function(a, b) {
      return !boardEqual(a, b);
    };
    noValidMoves = function(board) {
      var direction, directions, newBoard, _i, _len;
      directions = ['up', 'down', 'left', 'right'];
      for (_i = 0, _len = directions.length; _i < _len; _i++) {
        direction = directions[_i];
        newBoard = move(board, direction);
        if (moveIsValid(newBoard, board)) {
          return false;
        }
      }
      return true;
    };
    randomIndex = function(x) {
      return Math.floor(Math.random() * 4);
    };
    getRandomCellIndecies = function() {
      return [randomIndex(4), randomIndex(4)];
    };
    randomValue = function() {
      var val, values;
      values = [2, 2, 2, 2, 2, 4];
      return val = values[randomIndex(values.length)];
    };
    boardIsFull = function(board) {
      var x, y, _i, _j;
      for (x = _i = 0; _i <= 3; x = ++_i) {
        for (y = _j = 0; _j <= 3; y = ++_j) {
          if (board[x][y] === 0) {
            return false;
          }
        }
      }
      return true;
    };
    generateTile = function(board) {
      var val, x, y, _ref;
      if (!boardIsFull(board)) {
        val = randomValue();
        _ref = getRandomCellIndecies(), x = _ref[0], y = _ref[1];
        if (board[x][y] === 0) {
          return board[x][y] = val;
        } else {
          return generateTile(board);
        }
      }
    };
    getColumn = function(columnNumber, board) {
      var column, row, _i;
      column = [];
      for (row = _i = 0; _i <= 3; row = ++_i) {
        column[row] = board[row][columnNumber];
      }
      return column;
    };
    setRow = function(row, rowNumber, board) {
      return board[rowNumber] = row;
    };
    getColumnv2 = function(c, b) {
      b = board;
      return [b[0][c], b[1][c], b[2][c], b[3][c]];
    };
    getColumnV3 = function(c, b) {
      var col, r, _i, _len;
      col = [];
      for (_i = 0, _len = b.length; _i < _len; _i++) {
        r = b[_i];
        col.push(r[c]);
      }
      return col;
    };
    setColumn = function(newArray, columnNumber, board) {
      var b, c;
      b = board;
      c = columnNumber;
      return b[0][c] = newArray[0], b[1][c] = newArray[1], b[2][c] = newArray[2], b[3][c] = newArray[3], newArray;
    };
    collapseCells = function(cells, direction) {
      var i, padding, _i;
      cells = cells.filter(function(x) {
        return x !== 0;
      });
      padding = 4 - cells.length;
      for (i = _i = 1; 1 <= padding ? _i <= padding : _i >= padding; i = 1 <= padding ? ++_i : --_i) {
        switch (direction) {
          case 'right':
          case 'down':
            cells.unshift(0);
            break;
          case 'left':
          case 'up':
            cells.push(0);
        }
      }
      return cells;
    };
    mergeCells = function(cells, direction) {
      var x, y, _i, _j, _k, _l, _ref, _ref1;
      switch (direction) {
        case "right":
        case "down":
          for (y = _i = 0; _i < 3; y = ++_i) {
            for (x = _j = _ref = y + 1; _ref <= 3 ? _j <= 3 : _j >= 3; x = _ref <= 3 ? ++_j : --_j) {
              if (cells[x] === cells[y]) {
                cells[x] = cells[x] * 2;
                cells[y] = 0;
                break;
              } else if (cells[x] === 0) {
                break;
              } else if (cells[y] !== 0) {
                break;
              }
            }
          }
          break;
        case "left":
        case "up":
          for (y = _k = 3; _k > 0; y = --_k) {
            for (x = _l = _ref1 = y - 1; _ref1 <= 0 ? _l <= 0 : _l >= 0; x = _ref1 <= 0 ? ++_l : --_l) {
              if (cells[x] === cells[y]) {
                cells[x] = cells[x] * 2;
                cells[y] = 0;
                break;
              } else if (cells[x] === 0) {
                break;
              } else if (cells[y] !== 0) {
                break;
              }
            }
          }
      }
      return cells;
    };
    gameWon = function(board) {
      var cell, row, _i, _j, _len, _len1;
      for (_i = 0, _len = board.length; _i < _len; _i++) {
        row = board[_i];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          cell = row[_j];
          if (cell >= WinningTileValue) {
            return true;
          }
        }
      }
      return false;
    };
    gameLost = function(board) {
      return boardIsFull(board) && noValidMoves(board);
    };
    showBoard = function(board) {
      var x, y, _i, _results;
      _results = [];
      for (x = _i = 0; _i <= 3; x = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (y = _j = 0; _j <= 3; y = ++_j) {
            $(".r" + x + ".c" + y).css("background-color", colorChange(board[x][y]));
            if (board[x][y] !== 0) {
              _results1.push($(".r" + x + ".c" + y).html(board[x][y]));
            } else {
              _results1.push($(".r" + x + ".c" + y).html(''));
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    colorChange = function(board) {
      switch (board) {
        case 0:
          return "#e69a3d";
        case 2:
          return "#d7342d";
        case 4:
          return "#1b7885";
        case 8:
          return "#949598";
        case 16:
          return "#f88146";
        case 32:
          return "#32e5ff";
        case 64:
          return "#424344";
        case 128:
          return "#851e1b";
        case 256:
          return "#852a6f";
      }
    };
    move = function(board, direction) {
      var column, i, newBoard, row, _i;
      newBoard = buildBoard();
      for (i = _i = 0; _i <= 3; i = ++_i) {
        switch (direction) {
          case 'right':
          case 'left':
            row = mergeCells(getRow(i, board), direction);
            row = collapseCells(row, direction);
            setRow(row, i, newBoard);
            break;
          case 'up':
          case 'down':
            column = mergeCells(getColumn(i, board), direction);
            column = collapseCells(column, direction);
            setColumn(column, i, newBoard);
        }
      }
      return newBoard;
    };
    $('body').keydown((function(_this) {
      return function(e) {
        var direction, key, keys, newBoard;
        key = e.which;
        keys = [37, 38, 39, 40];
        if ($.inArray(key, keys) > -1) {
          e.preventDefault();
        }
        direction = (function() {
          switch (key) {
            case 37:
              return 'left';
            case 38:
              return 'up';
            case 39:
              return 'right';
            case 40:
              return 'down';
          }
        })();
        newBoard = move(_this.board, direction);
        if (MoveIsValid(newBoard, _this.board)) {
          _this.board = newBoard;
          generateTile(_this.board);
          showBoard(_this.board);
          if (gameLost(_this.board)) {
            return console.log("Game Over");
          } else if (gameWon(_this.board)) {
            return console.log("Congrats!");
          }
        }
      };
    })(this));
    this.board = buildBoard();
    generateTile(this.board);
    generateTile(this.board);
    return showBoard(this.board);
  });

}).call(this);

//# sourceMappingURL=main.map
